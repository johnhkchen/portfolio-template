---
import '../styles/globals.css';

export interface Props {
	title?: string;
}

const { title = "Portfolio Template" } = Astro.props;
---

<!doctype html>
<html lang="en" class="">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="font-sans antialiased">
		<slot />
		<script>
			// Theme switching functionality
			function setTheme(theme) {
				if (theme === 'dark') {
					document.documentElement.classList.add('dark');
					localStorage.setItem('theme', 'dark');
				} else {
					document.documentElement.classList.remove('dark');
					localStorage.setItem('theme', 'light');
				}
			}

			// Initialize theme on page load
			function initTheme() {
				const savedTheme = localStorage.getItem('theme');
				const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

				if (savedTheme) {
					setTheme(savedTheme);
				} else if (prefersDark) {
					setTheme('dark');
				} else {
					setTheme('light');
				}
			}

			// Run on initial load
			initTheme();

			// Listen for system theme changes
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				if (!localStorage.getItem('theme')) {
					setTheme(e.matches ? 'dark' : 'light');
				}
			});

			// Expose theme functions globally
			window.setTheme = setTheme;

			// Animation and scroll functionality
			document.addEventListener('DOMContentLoaded', function() {
				// Smooth scrolling for the entire document
				document.documentElement.style.scrollBehavior = 'smooth';

				// Set up Intersection Observer for animations
				const observer = new IntersectionObserver(
					(entries) => {
						entries.forEach((entry) => {
							if (entry.isIntersecting) {
								entry.target.classList.add('animate-fade-in-up');
								// Track active section for navigation
								if (entry.target.id) {
									window.activeSection = entry.target.id;
									// Dispatch custom event for navigation updates
									window.dispatchEvent(new CustomEvent('activeSectionChange', {
										detail: { sectionId: entry.target.id }
									}));
								}
							}
						});
					},
					{ threshold: 0.3, rootMargin: '0px 0px -20% 0px' }
				);

				// Observe all sections
				const sections = document.querySelectorAll('section, [data-section]');
				sections.forEach((section) => {
					if (section) observer.observe(section);
				});

				// Smooth scroll to section function
				window.scrollToSection = function(sectionId) {
					const element = document.getElementById(sectionId);
					if (element) {
						element.scrollIntoView({ behavior: 'smooth' });
					}
				};

				// Initialize active section
				window.activeSection = null;
			});
		</script>
	</body>
</html>
