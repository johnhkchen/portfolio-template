---
export interface Props {
	class?: string;
}

const { class: className = "" } = Astro.props;
---

<button
	id="theme-toggle"
	class={`group p-3 rounded-lg border border-border hover:border-muted-foreground/50 transition-all duration-300 ${className}`}
	aria-label="Toggle theme"
>
	<svg
		id="light-icon"
		class="w-4 h-4 text-muted-foreground group-hover:text-foreground transition-colors duration-300 hidden"
		fill="currentColor"
		viewBox="0 0 20 20"
	>
		<path
			fill-rule="evenodd"
			d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
			clip-rule="evenodd"
		/>
	</svg>
	<svg
		id="dark-icon"
		class="w-4 h-4 text-muted-foreground group-hover:text-foreground transition-colors duration-300"
		fill="currentColor"
		viewBox="0 0 20 20"
	>
		<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
	</svg>
</button>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const themeToggle = document.getElementById('theme-toggle');
		const lightIcon = document.getElementById('light-icon');
		const darkIcon = document.getElementById('dark-icon');

		function updateIcons() {
			const isDark = document.documentElement.classList.contains('dark');

			if (isDark) {
				lightIcon?.classList.remove('hidden');
				darkIcon?.classList.add('hidden');
			} else {
				lightIcon?.classList.add('hidden');
				darkIcon?.classList.remove('hidden');
			}
		}

		function toggleTheme() {
			const isDark = document.documentElement.classList.contains('dark');

			if (window.setTheme) {
				window.setTheme(isDark ? 'light' : 'dark');
			}

			updateIcons();
		}

		// Initialize icons based on current theme
		updateIcons();

		// Listen for theme toggle clicks
		themeToggle?.addEventListener('click', toggleTheme);

		// Listen for theme changes from other sources
		const observer = new MutationObserver(() => {
			updateIcons();
		});

		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ['class']
		});
	});
</script>